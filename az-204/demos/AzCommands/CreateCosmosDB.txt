az login

az account set --subscription "YOURSUB"

# Create a SQL API database and container

# Generate a unique 10 character alphanumeric string to ensure unique resource names
$uniqueId = -join ((65..90) + (97..122) | Get-Random -Count 5 | % {[char]$_})
$uniqueId = $uniqueId.ToLower()

$uniqueId = "gjmmp"

# Variables for SQL API resources
$rgName = "cjg-az204"
$location = "westus2"
$accountName= "cosmos-$uniqueId" #needs to be lower case
$databaseName='database1'
$containerName='container1'

# Create a resource group
az group create -n $rgName -l $location

# Create a Cosmos account for SQL API
# this can take 5-10 mins
az cosmosdb create -n $accountName -g $rgName --default-consistency-level Eventual --locations regionName='West US 2' failoverPriority=0 isZoneRedundant=False --locations regionName='East US 2' failoverPriority=1 isZoneRedundant=False

# Create a SQL API database
az cosmosdb database create --name $accountName -g $rgName --db-name $databaseName

# Define the index policy for the container, include spatial and composite indexes
$idxpolicy=$("
{
    `"indexingMode`": `"consistent`", 
    `"includedPaths`": [
        {`"path`": `"/*`"}
    ],
    `"excludedPaths`": [
        { `"path`": `"/headquarters/employees/?`"}
    ],
    `"spatialIndexes`": [
        {`"path`": `"/*`", `"types`": [`"Point`"]}
    ],
    `"compositeIndexes`":[
        [
            { `"path`":`"/name`", `"order`":`"ascending`" },
            { `"path`":`"/age`", `"order`":`"descending`" }
        ]
    ]
}")

# Persist index policy to json file
remove-item "idxpolicy-$uniqueId.json" -ea silentlycontinue
add-content "idxpolicy-$uniqueId.json" $idxpolicy

# Create a SQL API container
az cosmosdb collection create --name "$accountName" --resource-group-name $rgName --db-name $databaseName --collection-name $containerName --partition-key-path '/zipcode' --throughput 400

